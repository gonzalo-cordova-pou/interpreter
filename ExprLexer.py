# Generated from Expr.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,155,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
        9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
        15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,
        19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,
        23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,5,24,132,8,24,10,24,12,24,
        135,9,24,1,25,1,25,5,25,139,8,25,10,25,12,25,142,9,25,1,26,4,26,
        145,8,26,11,26,12,26,146,1,27,4,27,150,8,27,11,27,12,27,151,1,27,
        1,27,0,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,1,0,5,1,0,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,65,90,1,0,48,57,2,0,10,10,32,32,158,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,59,1,0,0,0,5,61,1,0,0,0,
        7,63,1,0,0,0,9,65,1,0,0,0,11,68,1,0,0,0,13,73,1,0,0,0,15,79,1,0,
        0,0,17,81,1,0,0,0,19,83,1,0,0,0,21,85,1,0,0,0,23,87,1,0,0,0,25,89,
        1,0,0,0,27,92,1,0,0,0,29,94,1,0,0,0,31,96,1,0,0,0,33,99,1,0,0,0,
        35,102,1,0,0,0,37,106,1,0,0,0,39,109,1,0,0,0,41,111,1,0,0,0,43,114,
        1,0,0,0,45,118,1,0,0,0,47,123,1,0,0,0,49,129,1,0,0,0,51,136,1,0,
        0,0,53,144,1,0,0,0,55,149,1,0,0,0,57,58,5,123,0,0,58,2,1,0,0,0,59,
        60,5,125,0,0,60,4,1,0,0,0,61,62,5,40,0,0,62,6,1,0,0,0,63,64,5,41,
        0,0,64,8,1,0,0,0,65,66,5,105,0,0,66,67,5,102,0,0,67,10,1,0,0,0,68,
        69,5,101,0,0,69,70,5,108,0,0,70,71,5,115,0,0,71,72,5,101,0,0,72,
        12,1,0,0,0,73,74,5,119,0,0,74,75,5,104,0,0,75,76,5,105,0,0,76,77,
        5,108,0,0,77,78,5,101,0,0,78,14,1,0,0,0,79,80,5,43,0,0,80,16,1,0,
        0,0,81,82,5,45,0,0,82,18,1,0,0,0,83,84,5,42,0,0,84,20,1,0,0,0,85,
        86,5,94,0,0,86,22,1,0,0,0,87,88,5,61,0,0,88,24,1,0,0,0,89,90,5,33,
        0,0,90,91,5,61,0,0,91,26,1,0,0,0,92,93,5,60,0,0,93,28,1,0,0,0,94,
        95,5,62,0,0,95,30,1,0,0,0,96,97,5,60,0,0,97,98,5,61,0,0,98,32,1,
        0,0,0,99,100,5,62,0,0,100,101,5,61,0,0,101,34,1,0,0,0,102,103,5,
        97,0,0,103,104,5,110,0,0,104,105,5,100,0,0,105,36,1,0,0,0,106,107,
        5,111,0,0,107,108,5,114,0,0,108,38,1,0,0,0,109,110,5,47,0,0,110,
        40,1,0,0,0,111,112,5,60,0,0,112,113,5,45,0,0,113,42,1,0,0,0,114,
        115,5,110,0,0,115,116,5,111,0,0,116,117,5,116,0,0,117,44,1,0,0,0,
        118,119,5,116,0,0,119,120,5,114,0,0,120,121,5,117,0,0,121,122,5,
        101,0,0,122,46,1,0,0,0,123,124,5,102,0,0,124,125,5,97,0,0,125,126,
        5,108,0,0,126,127,5,115,0,0,127,128,5,101,0,0,128,48,1,0,0,0,129,
        133,7,0,0,0,130,132,7,1,0,0,131,130,1,0,0,0,132,135,1,0,0,0,133,
        131,1,0,0,0,133,134,1,0,0,0,134,50,1,0,0,0,135,133,1,0,0,0,136,140,
        7,2,0,0,137,139,7,1,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,
        1,0,0,0,140,141,1,0,0,0,141,52,1,0,0,0,142,140,1,0,0,0,143,145,7,
        3,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,147,1,
        0,0,0,147,54,1,0,0,0,148,150,7,4,0,0,149,148,1,0,0,0,150,151,1,0,
        0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,154,6,27,
        0,0,154,56,1,0,0,0,5,0,133,140,146,151,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    NOT = 22
    TRUE = 23
    FALSE = 24
    ID = 25
    ID_FUNCTION = 26
    NUM = 27
    WS = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'('", "')'", "'if'", "'else'", "'while'", "'+'", 
            "'-'", "'*'", "'^'", "'='", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'and'", "'or'", "'/'", "'<-'", "'not'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "NOT", "TRUE", "FALSE", "ID", "ID_FUNCTION", "NUM", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "NOT", "TRUE", "FALSE", "ID", "ID_FUNCTION", 
                  "NUM", "WS" ]

    grammarFileName = "Expr.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


