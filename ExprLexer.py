# Generated from Expr.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,115,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,5,6,67,8,6,10,6,12,6,70,
        9,6,1,7,1,7,5,7,74,8,7,10,7,12,7,77,9,7,1,8,4,8,80,8,8,11,8,12,8,
        81,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,
        1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        4,20,110,8,20,11,20,12,20,111,1,20,1,20,0,0,21,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,1,0,5,1,0,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,65,90,1,0,48,57,2,0,10,10,32,32,118,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,
        1,0,0,0,3,45,1,0,0,0,5,47,1,0,0,0,7,50,1,0,0,0,9,55,1,0,0,0,11,61,
        1,0,0,0,13,64,1,0,0,0,15,71,1,0,0,0,17,79,1,0,0,0,19,83,1,0,0,0,
        21,85,1,0,0,0,23,88,1,0,0,0,25,90,1,0,0,0,27,92,1,0,0,0,29,95,1,
        0,0,0,31,98,1,0,0,0,33,100,1,0,0,0,35,102,1,0,0,0,37,104,1,0,0,0,
        39,106,1,0,0,0,41,109,1,0,0,0,43,44,5,123,0,0,44,2,1,0,0,0,45,46,
        5,125,0,0,46,4,1,0,0,0,47,48,5,105,0,0,48,49,5,102,0,0,49,6,1,0,
        0,0,50,51,5,101,0,0,51,52,5,108,0,0,52,53,5,115,0,0,53,54,5,101,
        0,0,54,8,1,0,0,0,55,56,5,119,0,0,56,57,5,104,0,0,57,58,5,105,0,0,
        58,59,5,108,0,0,59,60,5,101,0,0,60,10,1,0,0,0,61,62,5,60,0,0,62,
        63,5,45,0,0,63,12,1,0,0,0,64,68,7,0,0,0,65,67,7,1,0,0,66,65,1,0,
        0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,14,1,0,0,0,70,68,
        1,0,0,0,71,75,7,2,0,0,72,74,7,1,0,0,73,72,1,0,0,0,74,77,1,0,0,0,
        75,73,1,0,0,0,75,76,1,0,0,0,76,16,1,0,0,0,77,75,1,0,0,0,78,80,7,
        3,0,0,79,78,1,0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,
        18,1,0,0,0,83,84,5,61,0,0,84,20,1,0,0,0,85,86,5,33,0,0,86,87,5,61,
        0,0,87,22,1,0,0,0,88,89,5,60,0,0,89,24,1,0,0,0,90,91,5,62,0,0,91,
        26,1,0,0,0,92,93,5,60,0,0,93,94,5,61,0,0,94,28,1,0,0,0,95,96,5,62,
        0,0,96,97,5,61,0,0,97,30,1,0,0,0,98,99,5,94,0,0,99,32,1,0,0,0,100,
        101,5,43,0,0,101,34,1,0,0,0,102,103,5,45,0,0,103,36,1,0,0,0,104,
        105,5,42,0,0,105,38,1,0,0,0,106,107,5,47,0,0,107,40,1,0,0,0,108,
        110,7,4,0,0,109,108,1,0,0,0,110,111,1,0,0,0,111,109,1,0,0,0,111,
        112,1,0,0,0,112,113,1,0,0,0,113,114,6,20,0,0,114,42,1,0,0,0,5,0,
        68,75,81,111,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    ID = 7
    ID_FUNCTION = 8
    NUM = 9
    EQ = 10
    NEQ = 11
    LT = 12
    GT = 13
    LEQ = 14
    GEQ = 15
    POW = 16
    PLUS = 17
    MINUS = 18
    MUL = 19
    DIV = 20
    WS = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'if'", "'else'", "'while'", "'<-'", "'='", "'!='", 
            "'<'", "'>'", "'<='", "'>='", "'^'", "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "ID_FUNCTION", "NUM", "EQ", "NEQ", "LT", "GT", "LEQ", 
            "GEQ", "POW", "PLUS", "MINUS", "MUL", "DIV", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "ID", 
                  "ID_FUNCTION", "NUM", "EQ", "NEQ", "LT", "GT", "LEQ", 
                  "GEQ", "POW", "PLUS", "MINUS", "MUL", "DIV", "WS" ]

    grammarFileName = "Expr.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


